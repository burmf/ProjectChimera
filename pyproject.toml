[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "project-chimera"
version = "2.1.0"
description = "Professional High-Frequency Trading System with Clean Architecture"
authors = ["ProjectChimera Dev <dev@projectchimera.local>"]
readme = "README.md"
packages = [{include = "project_chimera"}]

[tool.poetry.dependencies]
python = ">=3.9,<3.9.7 || >3.9.7,<4.0"
httpx = "^0.25.0"
websockets = "^12.0"
pydantic = {extras = ["dotenv"], version = "^2.5.0"}
pydantic-settings = "^2.1.0"
pandas = "^2.1.0"
numpy = "^1.24.0"
scipy = "^1.11.0"
plotly = "^5.17.0"
streamlit = "^1.28.0"
asyncio-mqtt = "^0.14.0"
tenacity = "^8.2.0"
loguru = "^0.7.0"
hydra-core = "^1.3.0"
omegaconf = "^2.3.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-mock = "^3.12.0"
pytest-cov = "^4.1.0"
black = "^23.0.0"
isort = "^5.12.0"
ruff = "^0.1.0"
mypy = "^1.7.0"
pre-commit = "^3.5.0"
bandit = "^1.7.0"
safety = "^2.3.0"

[tool.poetry.scripts]
chimera = "project_chimera.cli:main"
chimera-dashboard = "project_chimera.ui.dashboard:main"
chimera-trading = "project_chimera.systems.master:main"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | archive
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["project_chimera"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=project_chimera --cov-report=html --cov-report=term-missing"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["project_chimera"]
omit = [
    "*/tests/*",
    "*/archive/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]