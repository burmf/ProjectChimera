[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "project-chimera"
version = "2.0.0"
description = "Production-grade async trading platform with advanced risk management"
authors = [
    {name = "ProjectChimera Dev", email = "dev@projectchimera.local"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["trading", "cryptocurrency", "algorithmic", "async", "risk-management"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    "httpx>=0.25.0",
    "websockets>=12.0",
    "pydantic[email]>=2.5.0",
    "pydantic-settings>=2.1.0",
    "tenacity>=8.2.0",
    "dependency-injector>=4.41.0",
    "prometheus-client>=0.19.0",
    "typer>=0.9.0",
    "streamlit>=1.28.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "plotly>=5.17.0",
    "loguru>=0.7.0",
    "structlog>=23.2.0",
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    "aiofiles>=23.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-httpx>=0.21.0",
    "pytest-cov>=4.1.0",
    "coverage[toml]>=7.3.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-httpx>=0.21.0",
    "pytest-cov>=4.1.0",
    "coverage[toml]>=7.3.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
chimera = "project_chimera.cli:main"
chimera-backtest = "project_chimera.cli.backtest:main"

[project.entry-points."chimera.strategies"]
# STRAT-7: Core trading strategies
weekend_effect = "project_chimera.strategies.weekend_effect:create_weekend_effect_strategy"
stop_reversion = "project_chimera.strategies.stop_rev:create_stop_reversion_strategy"
funding_contrarian = "project_chimera.strategies.fund_contra:create_funding_contra_strategy"
lob_reversion = "project_chimera.strategies.lob_revert:create_lob_reversion_strategy"
volatility_breakout = "project_chimera.strategies.vol_breakout:create_volatility_breakout_strategy"
cme_gap = "project_chimera.strategies.cme_gap:create_cme_gap_strategy"
basis_arbitrage = "project_chimera.strategies.basis_arb:create_basis_arbitrage_strategy"

# Legacy strategies
mini_momentum = "project_chimera.strategies.mini_momo:create_mini_momentum_strategy"
orderbook_mean_reversion = "project_chimera.strategies.ob_revert:create_orderbook_reversion_strategy"

[project.urls]
Homepage = "https://github.com/ProjectChimera/project-chimera"
Documentation = "https://github.com/ProjectChimera/project-chimera/blob/main/README.md"
Repository = "https://github.com/ProjectChimera/project-chimera"
Issues = "https://github.com/ProjectChimera/project-chimera/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | archive
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["project_chimera"]
src_paths = ["src", "tests"]

[tool.ruff]
target-version = "py310"
line-length = 88
src = ["src", "tests"]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert
    "S301",  # pickle usage
    "T201",  # print statements (for CLI output)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "B011", "S106"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
mypy_path = "src"

[[tool.mypy.overrides]]
module = [
    "websockets.*",
    "plotly.*",
    "streamlit.*",
    "tenacity.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=project_chimera",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--strict-markers",
    "--disable-warnings",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/project_chimera"]
omit = [
    "tests/*",
    "archive/*",
    "*/migrations/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
fail_under = 60

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "archive"]
skips = ["B101", "B601"]