version: '3.8'

services:
  # Main Trading Bot (4-Layer System)
  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: chimera-trading-bot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - postgres
      - news-collector
      - x-posts-collector
    networks:
      - chimera-network
    healthcheck:
      test: ["CMD", "python", "-c", "import project_chimera; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: ["python", "-m", "project_chimera.orchestrator_4layer"]

  # ProjectChimera 4-Layer System Orchestrator  
  chimera-4layer:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: chimera-4layer-orchestrator
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-o3-mini}
      - OPENAI_MAX_DAILY_COST=${OPENAI_MAX_DAILY_COST:-50.0}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    ports:
      - "8002:8000"
    depends_on:
      - redis
      - postgres
      - news-collector
      - x-posts-collector
    networks:
      - chimera-network
    healthcheck:
      test: ["CMD", "python", "-c", "from project_chimera.orchestrator_4layer import ProjectChimera4LayerOrchestrator; print('OK')"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    command: ["python", "-m", "project_chimera.orchestrator_4layer", "--symbols", "BTCUSDT", "ETHUSDT", "SOLUSDT"]

  # News RSS Collector Service
  news-collector:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: chimera-news-collector
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app
      - NEWS_COLLECTION_INTERVAL=${NEWS_COLLECTION_INTERVAL:-1}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - chimera-network
    healthcheck:
      test: ["CMD", "python", "-c", "from project_chimera.collectors.news_rss_collector import NewsRSSCollector; print('OK')"]
      interval: 120s
      timeout: 30s
      retries: 3
      start_period: 60s
    command: ["python", "-c", "import asyncio; from project_chimera.streams.redis_pipeline import RedisStreamPipeline; from project_chimera.collectors.news_rss_collector import NewsRSSCollector; asyncio.run(NewsRSSCollector(RedisStreamPipeline()).start())"]

  # X Posts Collector Service  
  x-posts-collector:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: chimera-x-posts-collector
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app
      - X_POSTS_COLLECTION_INTERVAL=${X_POSTS_COLLECTION_INTERVAL:-1}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - chimera-network
    healthcheck:
      test: ["CMD", "python", "-c", "from project_chimera.collectors.x_posts_collector import XPostsCollector; print('OK')"]
      interval: 120s
      timeout: 30s
      retries: 3
      start_period: 60s
    command: ["python", "-c", "import asyncio; from project_chimera.streams.redis_pipeline import RedisStreamPipeline; from project_chimera.collectors.x_posts_collector import XPostsCollector; asyncio.run(XPostsCollector(RedisStreamPipeline()).start())"]

  # AI Decision Engine Service
  ai-decision-engine:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: chimera-ai-decision-engine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-o3-mini}
      - OPENAI_MAX_DAILY_COST=${OPENAI_MAX_DAILY_COST:-50.0}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - chimera-network
    healthcheck:
      test: ["CMD", "python", "-c", "from project_chimera.ai.openai_decision_engine import OpenAIDecisionEngine; print('OK')"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    command: ["python", "-c", "import asyncio; from project_chimera.streams.redis_pipeline import RedisStreamPipeline; from project_chimera.ai.openai_decision_engine import OpenAIDecisionEngine, AIDecisionConfig; asyncio.run(OpenAIDecisionEngine(AIDecisionConfig('${OPENAI_API_KEY}'), RedisStreamPipeline()).start())"]

  # Development Trading Bot
  trading-bot-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: chimera-trading-bot-dev
    restart: "no"
    env_file:
      - .env.dev
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - /app/.venv  # Don't mount venv
    ports:
      - "8001:8000"
    depends_on:
      - redis
      - postgres
    networks:
      - chimera-network
    profiles:
      - development

  # Redis for caching and message queues
  redis:
    image: redis:7-alpine
    container_name: chimera-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - chimera-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent storage
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: chimera-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chimera}
      POSTGRES_USER: ${POSTGRES_USER:-chimera}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-chimera123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - chimera-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chimera}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: chimera-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - chimera-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: chimera-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - chimera-network
    profiles:
      - monitoring

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: chimera-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - trading-bot
    networks:
      - chimera-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  chimera-network:
    driver: bridge