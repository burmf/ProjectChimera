"""
Market data domain objects
Core data structures for market information and trading signals
"""

from dataclasses import dataclass, field
from datetime import datetime
from decimal import Decimal
from enum import Enum
from typing import Any

import pandas as pd


class SignalType(Enum):
    """Trading signal types"""

    BUY = "BUY"
    SELL = "SELL"
    HOLD = "HOLD"


class SignalStrength(Enum):
    """Signal strength levels"""

    WEAK = 0.3
    MEDIUM = 0.6
    STRONG = 0.9


@dataclass(frozen=True)
class Ticker:
    """Real-time ticker data"""

    symbol: str
    price: Decimal
    volume_24h: Decimal
    change_24h: Decimal
    timestamp: datetime


@dataclass(frozen=True)
class OrderBook:
    """Order book snapshot"""

    symbol: str
    bids: list[tuple[Decimal, Decimal]]  # [(price, quantity), ...]
    asks: list[tuple[Decimal, Decimal]]  # [(price, quantity), ...]
    timestamp: datetime

    @property
    def best_bid(self) -> Decimal | None:
        """Best bid price"""
        return self.bids[0][0] if self.bids else None

    @property
    def best_ask(self) -> Decimal | None:
        """Best ask price"""
        return self.asks[0][0] if self.asks else None

    @property
    def spread(self) -> Decimal | None:
        """Bid-ask spread"""
        if self.best_bid and self.best_ask:
            return self.best_ask - self.best_bid
        return None

    @property
    def imbalance(self) -> float | None:
        """Order book imbalance ratio"""
        if not self.bids or not self.asks:
            return None

        # Calculate top 5 levels imbalance
        bid_vol = sum(qty for _, qty in self.bids[:5])
        ask_vol = sum(qty for _, qty in self.asks[:5])
        total_vol = bid_vol + ask_vol

        if total_vol == 0:
            return 0.0

        return float((bid_vol - ask_vol) / total_vol)


@dataclass(frozen=True)
class OHLCV:
    """OHLCV candle data"""

    symbol: str
    open: Decimal
    high: Decimal
    low: Decimal
    close: Decimal
    volume: Decimal
    timestamp: datetime
    timeframe: str = "1m"  # 1m, 5m, 1h, etc.


@dataclass(frozen=True)
class FundingRate:
    """Funding rate information"""

    symbol: str
    rate: Decimal
    next_funding_time: datetime
    timestamp: datetime


@dataclass
class MarketFrame:
    """
    Unified market data frame containing all market information
    Used as input to strategy signal generation
    """

    symbol: str
    timestamp: datetime

    # Core price data
    ticker: Ticker | None = None
    orderbook: OrderBook | None = None
    ohlcv_1m: list[OHLCV] | None = None  # Recent 1m candles
    ohlcv_5m: list[OHLCV] | None = None  # Recent 5m candles
    ohlcv_1h: list[OHLCV] | None = None  # Recent 1h candles

    # Funding and fees
    funding_rate: FundingRate | None = None

    # Technical indicators (calculated separately)
    indicators: dict[str, Any] = field(default_factory=dict)

    @property
    def current_price(self) -> Decimal | None:
        """Current market price"""
        if self.ticker:
            return self.ticker.price
        elif self.ohlcv_1m:
            return self.ohlcv_1m[-1].close
        elif self.orderbook and self.orderbook.best_bid and self.orderbook.best_ask:
            return (self.orderbook.best_bid + self.orderbook.best_ask) / 2
        return None

    def get_ohlcv_df(self, timeframe: str = "1m") -> pd.DataFrame | None:
        """Convert OHLCV data to pandas DataFrame"""
        ohlcv_data = None
        if timeframe == "1m":
            ohlcv_data = self.ohlcv_1m
        elif timeframe == "5m":
            ohlcv_data = self.ohlcv_5m
        elif timeframe == "1h":
            ohlcv_data = self.ohlcv_1h

        if not ohlcv_data:
            return None

        data = []
        for candle in ohlcv_data:
            data.append(
                {
                    "timestamp": candle.timestamp,
                    "open": float(candle.open),
                    "high": float(candle.high),
                    "low": float(candle.low),
                    "close": float(candle.close),
                    "volume": float(candle.volume),
                }
            )

        df = pd.DataFrame(data)
        df.set_index("timestamp", inplace=True)
        return df


@dataclass(frozen=True)
class Signal:
    """Trading signal generated by strategy"""

    symbol: str
    signal_type: SignalType
    strength: SignalStrength
    price: Decimal
    timestamp: datetime

    # Signal metadata
    strategy_name: str
    confidence: float  # 0.0 to 1.0
    target_price: Decimal | None = None
    stop_loss: Decimal | None = None
    take_profit: Decimal | None = None

    # Additional context
    indicators_used: dict[str, Any] = field(default_factory=dict)
    reasoning: str = ""

    def is_valid(self) -> bool:
        """Check if signal is valid"""
        return (
            0.0 <= self.confidence <= 1.0
            and self.price > 0
            and self.signal_type in SignalType
        )
