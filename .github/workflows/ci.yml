name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  POETRY_VERSION: 2.1.3
  PYTHON_VERSION: 3.9

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pypoetry
          ~/.cache/pip
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-${{ matrix.python-version }}-
          
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        
    - name: Install dependencies
      run: |
        poetry install --with dev
        
    - name: Run linting with Ruff
      run: |
        poetry run ruff check project_chimera/ tests/
        
    - name: Run code formatting check with Black
      run: |
        poetry run black --check project_chimera/ tests/
        
    - name: Run type checking with MyPy
      run: |
        poetry run mypy project_chimera/
      continue-on-error: true  # MyPy可以暂时允许失败
        
    - name: Run tests with pytest
      run: |
        poetry run pytest tests/ -v --cov=project_chimera --cov-report=xml --cov-report=term-missing
      env:
        # Test environment variables
        BITGET_API_KEY: test_key
        BITGET_SECRET_KEY: test_secret  
        BITGET_PASSPHRASE: test_passphrase
        BITGET_SANDBOX: true
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Install dependencies
      run: |
        poetry install --with dev
        
    - name: Run security audit with Bandit
      run: |
        poetry run bandit -r project_chimera/ -f json -o bandit-report.json
      continue-on-error: true
        
    - name: Check for known vulnerabilities
      run: |
        poetry run safety check --json --output safety-report.json
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Build package
      run: |
        poetry build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-${{ github.sha }}
        path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.event_name != 'pull_request'
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: projectchimera/trading-bot
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment"
        echo "Docker image: projectchimera/trading-bot:latest"
        # Here you would add actual deployment steps
        # e.g., kubectl apply, docker-compose pull, etc.